{"version":3,"file":"integration.js","sources":["../../../../src/profiling/integration.ts"],"sourcesContent":["import type { Event, EventProcessor, Integration } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { PROFILING_EVENT_CACHE } from './cache';\nimport { addProfilingExtensionMethods } from './hubextensions';\n\n/**\n * Browser profiling integration. Stores any event that has contexts[\"profile\"][\"profile_id\"]\n * This exists because we do not want to await async profiler.stop calls as transaction.finish is called\n * in a synchronous context. Instead, we handle sending the profile async from the promise callback and\n * rely on being able to pull the event from the cache when we need to construct the envelope. This makes the\n * integration less reliable as we might be dropping profiles when the cache is full.\n *\n * @experimental\n */\nexport class BrowserProfilingIntegration implements Integration {\n  public readonly name: string = 'BrowserProfilingIntegration';\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void): void {\n    // Patching the hub to add the extension methods.\n    // Warning: we have an implicit dependency on import order and we will fail patching if the constructor of\n    // BrowserProfilingIntegration is called before @sentry/tracing is imported. This is because we need to patch\n    // the methods of @sentry/tracing which are patched as a side effect of importing @sentry/tracing.\n    addProfilingExtensionMethods();\n\n    // Add our event processor\n    addGlobalEventProcessor(this.handleGlobalEvent.bind(this));\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public handleGlobalEvent(event: Event): Event {\n    const profileId = event.contexts && event.contexts['profile'] && event.contexts['profile']['profile_id'];\n\n    if (profileId && typeof profileId === 'string') {\n      if (__DEBUG_BUILD__) {\n        logger.log('[Profiling] Profiling event found, caching it.');\n      }\n      PROFILING_EVENT_CACHE.add(profileId, event);\n    }\n\n    return event;\n  }\n}\n"],"names":[],"mappings":";;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAA,2BAAA,EAAA,CAAA,WAAA,GAAA,EAAA,2BAAA,CAAA,SAAA,CAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,EAAA;AACA,IAAA,MAAA,GAAA,CAAA,IAAA,CAAA,IAAA,GAAA,8BAAA,CAAA;AACA;AACA;AACA;AACA;AACA,GAAA,SAAA,CAAA,uBAAA,EAAA;AACA;AACA;AACA;AACA;AACA,IAAA,4BAAA,EAAA,CAAA;AACA;AACA;AACA,IAAA,uBAAA,CAAA,IAAA,CAAA,iBAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AACA,GAAA;AACA;AACA;AACA;AACA;AACA,GAAA,iBAAA,CAAA,KAAA,EAAA;AACA,IAAA,MAAA,SAAA,GAAA,KAAA,CAAA,QAAA,IAAA,KAAA,CAAA,QAAA,CAAA,SAAA,CAAA,IAAA,KAAA,CAAA,QAAA,CAAA,SAAA,CAAA,CAAA,YAAA,CAAA,CAAA;AACA;AACA,IAAA,IAAA,SAAA,IAAA,OAAA,SAAA,KAAA,QAAA,EAAA;AACA,MAAA,KAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,GAAA;AACA,QAAA,MAAA,CAAA,GAAA,CAAA,gDAAA,CAAA,CAAA;AACA,OAAA;AACA,MAAA,qBAAA,CAAA,GAAA,CAAA,SAAA,EAAA,KAAA,CAAA,CAAA;AACA,KAAA;AACA;AACA,IAAA,OAAA,KAAA,CAAA;AACA,GAAA;AACA;;;;"}