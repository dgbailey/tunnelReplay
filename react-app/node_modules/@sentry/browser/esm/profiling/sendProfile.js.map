{"version":3,"file":"sendProfile.js","sources":["../../../../src/profiling/sendProfile.ts"],"sourcesContent":["import { getCurrentHub } from '@sentry/core';\nimport { logger } from '@sentry/utils';\n\nimport { PROFILING_EVENT_CACHE } from './cache';\nimport type { ProcessedJSSelfProfile } from './jsSelfProfiling';\nimport type { ProfiledEvent } from './utils';\nimport { createProfilingEventEnvelope } from './utils';\n/**\n * Performs lookup in the event cache and sends the profile to Sentry.\n * If the profiled transaction event is found, we use the profiled transaction event and profile\n * to construct a profile type envelope and send it to Sentry.\n */\nexport function sendProfile(profileId: string, profile: ProcessedJSSelfProfile): void {\n  const event = PROFILING_EVENT_CACHE.get(profileId);\n\n  if (!event) {\n    // We could not find a corresponding transaction event for this profile.\n    // Opt to do nothing for now, but in the future we should implement a simple retry mechanism.\n    if (__DEBUG_BUILD__) {\n      logger.log(\"[Profiling] Couldn't find a transaction event for this profile, dropping it.\");\n    }\n    return;\n  }\n\n  event.sdkProcessingMetadata = event.sdkProcessingMetadata || {};\n  if (event.sdkProcessingMetadata && !event.sdkProcessingMetadata['profile']) {\n    event.sdkProcessingMetadata['profile'] = profile;\n  }\n\n  // Client, Dsn and Transport are all required to be able to send the profiling event to Sentry.\n  // If either of them is not available, we remove the profile from the transaction event.\n  // and forward it to the next event processor.\n  const hub = getCurrentHub();\n  const client = hub.getClient();\n\n  if (!client) {\n    if (__DEBUG_BUILD__) {\n      logger.log(\n        '[Profiling] getClient did not return a Client, removing profile from event and forwarding to next event processors.',\n      );\n    }\n    return;\n  }\n\n  const dsn = client.getDsn();\n  if (!dsn) {\n    if (__DEBUG_BUILD__) {\n      logger.log(\n        '[Profiling] getDsn did not return a Dsn, removing profile from event and forwarding to next event processors.',\n      );\n    }\n    return;\n  }\n\n  const transport = client.getTransport();\n  if (!transport) {\n    if (__DEBUG_BUILD__) {\n      logger.log(\n        '[Profiling] getTransport did not return a Transport, removing profile from event and forwarding to next event processors.',\n      );\n    }\n    return;\n  }\n\n  // If all required components are available, we construct a profiling event envelope and send it to Sentry.\n  if (__DEBUG_BUILD__) {\n    logger.log('[Profiling] Preparing envelope and sending a profiling event');\n  }\n  const envelope = createProfilingEventEnvelope(event as ProfiledEvent, dsn);\n\n  // Evict event from the cache - we want to prevent the LRU cache from prioritizing already sent events over new ones.\n  PROFILING_EVENT_CACHE.delete(profileId);\n\n  if (!envelope) {\n    if (__DEBUG_BUILD__) {\n      logger.log('[Profiling] Failed to construct envelope');\n    }\n    return;\n  }\n\n  if (__DEBUG_BUILD__) {\n    logger.log('[Profiling] Envelope constructed, sending it');\n  }\n\n  // Wrap in try/catch because send will throw in case of a network error.\n  transport.send(envelope).then(null, reason => {\n    __DEBUG_BUILD__ && logger.log('[Profiling] Error while sending event:', reason);\n  });\n}\n"],"names":[],"mappings":";;;;;AAOA;AACA;AACA;AACA;AACA;AACA,SAAA,WAAA,CAAA,SAAA,EAAA,OAAA,EAAA;AACA,EAAA,MAAA,KAAA,GAAA,qBAAA,CAAA,GAAA,CAAA,SAAA,CAAA,CAAA;AACA;AACA,EAAA,IAAA,CAAA,KAAA,EAAA;AACA;AACA;AACA,IAAA,KAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,GAAA;AACA,MAAA,MAAA,CAAA,GAAA,CAAA,8EAAA,CAAA,CAAA;AACA,KAAA;AACA,IAAA,OAAA;AACA,GAAA;AACA;AACA,EAAA,KAAA,CAAA,qBAAA,GAAA,KAAA,CAAA,qBAAA,IAAA,EAAA,CAAA;AACA,EAAA,IAAA,KAAA,CAAA,qBAAA,IAAA,CAAA,KAAA,CAAA,qBAAA,CAAA,SAAA,CAAA,EAAA;AACA,IAAA,KAAA,CAAA,qBAAA,CAAA,SAAA,CAAA,GAAA,OAAA,CAAA;AACA,GAAA;AACA;AACA;AACA;AACA;AACA,EAAA,MAAA,GAAA,GAAA,aAAA,EAAA,CAAA;AACA,EAAA,MAAA,MAAA,GAAA,GAAA,CAAA,SAAA,EAAA,CAAA;AACA;AACA,EAAA,IAAA,CAAA,MAAA,EAAA;AACA,IAAA,KAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,GAAA;AACA,MAAA,MAAA,CAAA,GAAA;AACA,QAAA,qHAAA;AACA,OAAA,CAAA;AACA,KAAA;AACA,IAAA,OAAA;AACA,GAAA;AACA;AACA,EAAA,MAAA,GAAA,GAAA,MAAA,CAAA,MAAA,EAAA,CAAA;AACA,EAAA,IAAA,CAAA,GAAA,EAAA;AACA,IAAA,KAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,GAAA;AACA,MAAA,MAAA,CAAA,GAAA;AACA,QAAA,+GAAA;AACA,OAAA,CAAA;AACA,KAAA;AACA,IAAA,OAAA;AACA,GAAA;AACA;AACA,EAAA,MAAA,SAAA,GAAA,MAAA,CAAA,YAAA,EAAA,CAAA;AACA,EAAA,IAAA,CAAA,SAAA,EAAA;AACA,IAAA,KAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,GAAA;AACA,MAAA,MAAA,CAAA,GAAA;AACA,QAAA,2HAAA;AACA,OAAA,CAAA;AACA,KAAA;AACA,IAAA,OAAA;AACA,GAAA;AACA;AACA;AACA,EAAA,KAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,GAAA;AACA,IAAA,MAAA,CAAA,GAAA,CAAA,8DAAA,CAAA,CAAA;AACA,GAAA;AACA,EAAA,MAAA,QAAA,GAAA,4BAAA,CAAA,KAAA,GAAA,GAAA,CAAA,CAAA;AACA;AACA;AACA,EAAA,qBAAA,CAAA,MAAA,CAAA,SAAA,CAAA,CAAA;AACA;AACA,EAAA,IAAA,CAAA,QAAA,EAAA;AACA,IAAA,KAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,GAAA;AACA,MAAA,MAAA,CAAA,GAAA,CAAA,0CAAA,CAAA,CAAA;AACA,KAAA;AACA,IAAA,OAAA;AACA,GAAA;AACA;AACA,EAAA,KAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,GAAA;AACA,IAAA,MAAA,CAAA,GAAA,CAAA,8CAAA,CAAA,CAAA;AACA,GAAA;AACA;AACA;AACA,EAAA,SAAA,CAAA,IAAA,CAAA,QAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAA,MAAA,IAAA;AACA,IAAA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,MAAA,CAAA,GAAA,CAAA,wCAAA,EAAA,MAAA,CAAA,CAAA;AACA,GAAA,CAAA,CAAA;AACA;;;;"}