{"version":3,"file":"utils.js","sources":["../../../../src/profiling/utils.ts"],"sourcesContent":["import { DEFAULT_ENVIRONMENT } from '@sentry/core';\nimport type {\n  DsnComponents,\n  DynamicSamplingContext,\n  Event,\n  EventEnvelope,\n  EventEnvelopeHeaders,\n  EventItem,\n  SdkInfo,\n  SdkMetadata,\n} from '@sentry/types';\nimport { createEnvelope, dropUndefinedKeys, dsnToString, logger, uuid4 } from '@sentry/utils';\n\nimport { WINDOW } from '../helpers';\nimport type {\n  JSSelfProfile,\n  JSSelfProfileStack,\n  RawThreadCpuProfile,\n  SentryProfile,\n  ThreadCpuProfile,\n} from './jsSelfProfiling';\n\nconst MS_TO_NS = 1e6;\n// Use 0 as main thread id which is identical to threadId in node:worker_threads\n// where main logs 0 and workers seem to log in increments of 1\nconst THREAD_ID_STRING = String(0);\nconst THREAD_NAME = 'main';\n\n// Machine properties (eval only once)\nlet OS_PLATFORM = ''; // macos\nlet OS_PLATFORM_VERSION = ''; // 13.2\nlet OS_ARCH = ''; // arm64\nlet OS_BROWSER = (WINDOW.navigator && WINDOW.navigator.userAgent) || '';\nlet OS_MODEL = '';\nconst OS_LOCALE =\n  (WINDOW.navigator && WINDOW.navigator.language) ||\n  (WINDOW.navigator && WINDOW.navigator.languages && WINDOW.navigator.languages[0]) ||\n  '';\n\ntype UAData = {\n  platform?: string;\n  architecture?: string;\n  model?: string;\n  platformVersion?: string;\n  fullVersionList?: {\n    brand: string;\n    version: string;\n  }[];\n};\n\ninterface UserAgentData {\n  getHighEntropyValues: (keys: string[]) => Promise<UAData>;\n}\n\nfunction isUserAgentData(data: unknown): data is UserAgentData {\n  return typeof data === 'object' && data !== null && 'getHighEntropyValues' in data;\n}\n\n// @ts-ignore userAgentData is not part of the navigator interface yet\nconst userAgentData = WINDOW.navigator && WINDOW.navigator.userAgentData;\n\nif (isUserAgentData(userAgentData)) {\n  userAgentData\n    .getHighEntropyValues(['architecture', 'model', 'platform', 'platformVersion', 'fullVersionList'])\n    .then((ua: UAData) => {\n      OS_PLATFORM = ua.platform || '';\n      OS_ARCH = ua.architecture || '';\n      OS_MODEL = ua.model || '';\n      OS_PLATFORM_VERSION = ua.platformVersion || '';\n\n      if (ua.fullVersionList && ua.fullVersionList.length > 0) {\n        const firstUa = ua.fullVersionList[ua.fullVersionList.length - 1];\n        OS_BROWSER = `${firstUa.brand} ${firstUa.version}`;\n      }\n    })\n    .catch(e => void e);\n}\n\nfunction isRawThreadCpuProfile(profile: ThreadCpuProfile | RawThreadCpuProfile): profile is RawThreadCpuProfile {\n  return !('thread_metadata' in profile);\n}\n\n// Enriches the profile with threadId of the current thread.\n// This is done in node as we seem to not be able to get the info from C native code.\n/**\n *\n */\nexport function enrichWithThreadInformation(profile: ThreadCpuProfile | RawThreadCpuProfile): ThreadCpuProfile {\n  if (!isRawThreadCpuProfile(profile)) {\n    return profile;\n  }\n\n  return convertJSSelfProfileToSampledFormat(profile);\n}\n\n// Profile is marked as optional because it is deleted from the metadata\n// by the integration before the event is processed by other integrations.\nexport interface ProfiledEvent extends Event {\n  sdkProcessingMetadata: {\n    profile?: RawThreadCpuProfile;\n  };\n}\n\n/** Extract sdk info from from the API metadata */\nfunction getSdkMetadataForEnvelopeHeader(metadata?: SdkMetadata): SdkInfo | undefined {\n  if (!metadata || !metadata.sdk) {\n    return undefined;\n  }\n\n  return { name: metadata.sdk.name, version: metadata.sdk.version } as SdkInfo;\n}\n\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/\nfunction enhanceEventWithSdkInfo(event: Event, sdkInfo?: SdkInfo): Event {\n  if (!sdkInfo) {\n    return event;\n  }\n  event.sdk = event.sdk || {};\n  event.sdk.name = event.sdk.name || sdkInfo.name || 'unknown sdk';\n  event.sdk.version = event.sdk.version || sdkInfo.version || 'unknown sdk version';\n  event.sdk.integrations = [...(event.sdk.integrations || []), ...(sdkInfo.integrations || [])];\n  event.sdk.packages = [...(event.sdk.packages || []), ...(sdkInfo.packages || [])];\n  return event;\n}\n\nfunction createEventEnvelopeHeaders(\n  event: Event,\n  sdkInfo: SdkInfo | undefined,\n  tunnel: string | undefined,\n  dsn: DsnComponents,\n): EventEnvelopeHeaders {\n  const dynamicSamplingContext = event.sdkProcessingMetadata && event.sdkProcessingMetadata['dynamicSamplingContext'];\n\n  return {\n    event_id: event.event_id as string,\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!tunnel && { dsn: dsnToString(dsn) }),\n    ...(event.type === 'transaction' &&\n      dynamicSamplingContext && {\n        trace: dropUndefinedKeys({ ...dynamicSamplingContext }) as DynamicSamplingContext,\n      }),\n  };\n}\n\nfunction getTraceId(event: Event): string {\n  const traceId: unknown = event && event.contexts && event.contexts['trace'] && event.contexts['trace']['trace_id'];\n  // Log a warning if the profile has an invalid traceId (should be uuidv4).\n  // All profiles and transactions are rejected if this is the case and we want to\n  // warn users that this is happening if they enable debug flag\n  if (typeof traceId === 'string' && traceId.length !== 32) {\n    if (__DEBUG_BUILD__) {\n      logger.log(`[Profiling] Invalid traceId: ${traceId} on profiled event`);\n    }\n  }\n  if (typeof traceId !== 'string') {\n    return '';\n  }\n\n  return traceId;\n}\n/**\n * Creates a profiling event envelope from a Sentry event. If profile does not pass\n * validation, returns null.\n * @param event\n * @param dsn\n * @param metadata\n * @param tunnel\n * @returns {EventEnvelope | null}\n */\n\n/**\n * Creates a profiling event envelope from a Sentry event.\n */\nexport function createProfilingEventEnvelope(\n  event: ProfiledEvent,\n  dsn: DsnComponents,\n  metadata?: SdkMetadata,\n  tunnel?: string,\n): EventEnvelope | null {\n  if (event.type !== 'transaction') {\n    // createProfilingEventEnvelope should only be called for transactions,\n    // we type guard this behavior with isProfiledTransactionEvent.\n    throw new TypeError('Profiling events may only be attached to transactions, this should never occur.');\n  }\n\n  const rawProfile = event.sdkProcessingMetadata['profile'];\n\n  if (rawProfile === undefined || rawProfile === null) {\n    throw new TypeError(\n      `Cannot construct profiling event envelope without a valid profile. Got ${rawProfile} instead.`,\n    );\n  }\n\n  if (!rawProfile.profile_id) {\n    throw new TypeError('Profile is missing profile_id');\n  }\n\n  if (rawProfile.samples.length <= 1) {\n    if (__DEBUG_BUILD__) {\n      // Log a warning if the profile has less than 2 samples so users can know why\n      // they are not seeing any profiling data and we cant avoid the back and forth\n      // of asking them to provide us with a dump of the profile data.\n      logger.log('[Profiling] Discarding profile because it contains less than 2 samples');\n    }\n    return null;\n  }\n\n  const traceId = getTraceId(event);\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(metadata);\n  enhanceEventWithSdkInfo(event, metadata && metadata.sdk);\n  const envelopeHeaders = createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn);\n  const enrichedThreadProfile = enrichWithThreadInformation(rawProfile);\n  const transactionStartMs = typeof event.start_timestamp === 'number' ? event.start_timestamp * 1000 : Date.now();\n  const transactionEndMs = typeof event.timestamp === 'number' ? event.timestamp * 1000 : Date.now();\n\n  const profile: SentryProfile = {\n    event_id: rawProfile.profile_id,\n    timestamp: new Date(transactionStartMs).toISOString(),\n    platform: 'javascript',\n    version: '1',\n    release: event.release || '',\n    environment: event.environment || DEFAULT_ENVIRONMENT,\n    runtime: {\n      name: 'javascript',\n      version: WINDOW.navigator.userAgent,\n    },\n    os: {\n      name: OS_PLATFORM,\n      version: OS_PLATFORM_VERSION,\n      build_number: OS_BROWSER,\n    },\n    device: {\n      locale: OS_LOCALE,\n      model: OS_MODEL,\n      manufacturer: OS_BROWSER,\n      architecture: OS_ARCH,\n      is_emulator: false,\n    },\n    profile: enrichedThreadProfile,\n    transactions: [\n      {\n        name: event.transaction || '',\n        id: event.event_id || uuid4(),\n        trace_id: traceId,\n        active_thread_id: THREAD_ID_STRING,\n        relative_start_ns: '0',\n        relative_end_ns: ((transactionEndMs - transactionStartMs) * 1e6).toFixed(0),\n      },\n    ],\n  };\n\n  const envelopeItem: EventItem = [\n    {\n      type: 'profile',\n    },\n    // @ts-ignore this is missing in typedef\n    profile,\n  ];\n\n  return createEnvelope<EventEnvelope>(envelopeHeaders, [envelopeItem]);\n}\n\n/**\n *\n */\nexport function isProfiledTransactionEvent(event: Event): event is ProfiledEvent {\n  return !!(event.sdkProcessingMetadata && event.sdkProcessingMetadata['profile']);\n}\n\n// Due to how profiles are attached to event metadata, we may sometimes want to remove them to ensure\n// they are not processed by other Sentry integrations. This can be the case when we cannot construct a valid\n// profile from the data we have or some of the mechanisms to send the event (Hub, Transport etc) are not available to us.\n/**\n *\n */\nexport function maybeRemoveProfileFromSdkMetadata(event: Event | ProfiledEvent): Event {\n  if (!isProfiledTransactionEvent(event)) {\n    return event;\n  }\n\n  delete event.sdkProcessingMetadata.profile;\n  return event;\n}\n\n/**\n * Converts a JSSelfProfile to a our sampled format.\n * Does not currently perform stack indexing.\n */\nexport function convertJSSelfProfileToSampledFormat(input: JSSelfProfile): ThreadCpuProfile {\n  let EMPTY_STACK_ID: undefined | number = undefined;\n  let STACK_ID = 0;\n\n  // Initialize the profile that we will fill with data\n  const profile: ThreadCpuProfile = {\n    samples: [],\n    stacks: [],\n    frames: [],\n    thread_metadata: {\n      [THREAD_ID_STRING]: { name: THREAD_NAME },\n    },\n  };\n\n  if (!input.samples.length) {\n    return profile;\n  }\n\n  // We assert samples.length > 0 above and timestamp should always be present\n  const start = input.samples[0].timestamp;\n\n  for (let i = 0; i < input.samples.length; i++) {\n    const jsSample = input.samples[i];\n\n    // If sample has no stack, add an empty sample\n    if (jsSample.stackId === undefined) {\n      if (EMPTY_STACK_ID === undefined) {\n        EMPTY_STACK_ID = STACK_ID;\n        profile.stacks[EMPTY_STACK_ID] = [];\n        STACK_ID++;\n      }\n\n      profile['samples'][i] = {\n        // convert ms timestamp to ns\n        elapsed_since_start_ns: ((jsSample.timestamp - start) * MS_TO_NS).toFixed(0),\n        stack_id: EMPTY_STACK_ID,\n        thread_id: THREAD_ID_STRING,\n      };\n      continue;\n    }\n\n    let stackTop: JSSelfProfileStack | undefined = input.stacks[jsSample.stackId];\n\n    // Functions in top->down order (root is last)\n    // We follow the stackTop.parentId trail and collect each visited frameId\n    const stack: number[] = [];\n\n    while (stackTop) {\n      stack.push(stackTop.frameId);\n\n      const frame = input.frames[stackTop.frameId];\n\n      // If our frame has not been indexed yet, index it\n      if (profile.frames[stackTop.frameId] === undefined) {\n        profile.frames[stackTop.frameId] = {\n          function: frame.name,\n          file: frame.resourceId ? input.resources[frame.resourceId] : undefined,\n          line: frame.line,\n          column: frame.column,\n        };\n      }\n\n      stackTop = stackTop.parentId === undefined ? undefined : input.stacks[stackTop.parentId];\n    }\n\n    const sample: ThreadCpuProfile['samples'][0] = {\n      // convert ms timestamp to ns\n      elapsed_since_start_ns: ((jsSample.timestamp - start) * MS_TO_NS).toFixed(0),\n      stack_id: STACK_ID,\n      thread_id: THREAD_ID_STRING,\n    };\n\n    profile['stacks'][STACK_ID] = stack;\n    profile['samples'][i] = sample;\n    STACK_ID++;\n  }\n\n  return profile;\n}\n"],"names":[],"mappings":"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"}